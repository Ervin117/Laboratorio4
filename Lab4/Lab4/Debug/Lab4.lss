
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000025c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800120  00800120  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000815  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c9  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e1  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fb  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e8  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  9e:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PinChange>:
}
/****************************************/
// NON-Interrupt subroutines
void PinChange(void) {
	//Configuración del Pin_Change
	PCICR |= (1 << PCIE0);
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3) | (1 << PCINT4);
  b0:	eb e6       	ldi	r30, 0x6B	; 107
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 61       	ori	r24, 0x18	; 24
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <TMR0>:
}

void TMR0(void)
{
	cli(); 
  bc:	f8 94       	cli
	//Configuración del Clock del reloj
	CLKPR = (1<<CLKPCE); 
  be:	e1 e6       	ldi	r30, 0x61	; 97
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 e8       	ldi	r24, 0x80	; 128
  c4:	80 83       	st	Z, r24
	CLKPR = (1<<CLKPS2);  // 1MHz
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	80 83       	st	Z, r24
	
	TCCR0B = (1<<CS02) | (1<<CS00); 
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 251; 
  ce:	8b ef       	ldi	r24, 0xFB	; 251
  d0:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0); 
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	sei(); 
  d8:	78 94       	sei
  da:	08 95       	ret

000000dc <_ADC>:
	
}

void _ADC(void)
{
	ADMUX = 0; 
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1 << MUX0) |  (1 << MUX1) | (1<<MUX2);
  e2:	80 81       	ld	r24, Z
  e4:	87 66       	ori	r24, 0x67	; 103
  e6:	80 83       	st	Z, r24
	
	ADCSRA = 0; 
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADPS1) | (1<<ADPS2) |  (1<<ADIE) | (1<<ADEN);
  ee:	80 81       	ld	r24, Z
  f0:	8e 68       	ori	r24, 0x8E	; 142
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <main>:
void _ADC(); 
void TMR0(); 
/****************************************/
// Main Function
int main(void) {
	DDRD = 0xFF;  // Configura PORTD como salida
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 100:	1b b8       	out	0x0b, r1	; 11

	DDRB &= ~((1 << PORTB3) | (1 << PORTB4));  //Puerto B como salida
 102:	84 b1       	in	r24, 0x04	; 4
 104:	87 7e       	andi	r24, 0xE7	; 231
 106:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2); // Configura PB0-PB2 como salidas
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	87 60       	ori	r24, 0x07	; 7
 10c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB3) | (1 << PORTB4);    //Activacion de pull-ups
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	88 61       	ori	r24, 0x18	; 24
 112:	85 b9       	out	0x05, r24	; 5
	
	DDRC |= (1 << PORTC0); // Configura PC0 como salida
 114:	87 b1       	in	r24, 0x07	; 7
 116:	81 60       	ori	r24, 0x01	; 1
 118:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<PORTC0);
 11a:	88 b1       	in	r24, 0x08	; 8
 11c:	8e 7f       	andi	r24, 0xFE	; 254
 11e:	88 b9       	out	0x08, r24	; 8
	UCSR0B = 0x00; 
 120:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//if(lectura >= contador){
		
	//}
	
	PinChange();
 124:	0e 94 53 00 	call	0xa6	; 0xa6 <PinChange>
	_ADC(); 
 128:	0e 94 6e 00 	call	0xdc	; 0xdc <_ADC>
	TMR0(); 
 12c:	0e 94 5e 00 	call	0xbc	; 0xbc <TMR0>
	
	sei();
 130:	78 94       	sei
	while (1) {
		if (ADCH >= contador)
 132:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 136:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <contador>
 13a:	98 17       	cp	r25, r24
 13c:	20 f0       	brcs	.+8      	; 0x146 <main+0x4a>
		{
			PORTC |= (1<< PORTC0);
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	81 60       	ori	r24, 0x01	; 1
 142:	88 b9       	out	0x08, r24	; 8
 144:	03 c0       	rjmp	.+6      	; 0x14c <main+0x50>
		}
		else{
			PORTC &= ~(1<< PORTC0);
 146:	88 b1       	in	r24, 0x08	; 8
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	83 ec       	ldi	r24, 0xC3	; 195
 14e:	99 e0       	ldi	r25, 0x09	; 9
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x54>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x5a>
 156:	00 00       	nop
 158:	ec cf       	rjmp	.-40     	; 0x132 <main+0x36>

0000015a <__vector_3>:
	
}

/****************************************/
// Interrupt routine
ISR(PCINT0_vect) {
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
	if (!(PINB & (1 << PORTB3))) {
 166:	1b 99       	sbic	0x03, 3	; 3
 168:	05 c0       	rjmp	.+10     	; 0x174 <__vector_3+0x1a>
		contador++;
 16a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <contador>
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <contador>
	}
	if (!(PINB & (1 << PORTB4))) {
 174:	1c 99       	sbic	0x03, 4	; 3
 176:	05 c0       	rjmp	.+10     	; 0x182 <__vector_3+0x28>
		contador--;
 178:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <contador>
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <contador>
	}
	//PORTC = contador; //Salida del contador
}
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_16>:

ISR(TIMER0_OVF_vect){
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
	TCNT0 = 251;
 19a:	8b ef       	ldi	r24, 0xFB	; 251
 19c:	86 bd       	out	0x26, r24	; 38
	display++;
 19e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <display>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <display>
	PORTB &= ~((1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2));
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	88 7f       	andi	r24, 0xF8	; 248
 1ac:	85 b9       	out	0x05, r24	; 5
	switch(display){
 1ae:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <display>
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	59 f0       	breq	.+22     	; 0x1cc <__vector_16+0x3e>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	81 f0       	breq	.+32     	; 0x1da <__vector_16+0x4c>
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	a9 f4       	brne	.+42     	; 0x1e8 <__vector_16+0x5a>
		case 1: 
			PORTB |= (1<<PORTB0);
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	85 b9       	out	0x05, r24	; 5
			PORTD = decVolt ;
 1c4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1c8:	8b b9       	out	0x0b, r24	; 11
			break;
 1ca:	10 c0       	rjmp	.+32     	; 0x1ec <__vector_16+0x5e>
		case 2:
			PORTB |= (1<<PORTB1);
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	85 b9       	out	0x05, r24	; 5
			PORTD = unidVolt;
 1d2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <unidVolt>
 1d6:	8b b9       	out	0x0b, r24	; 11
			break;
 1d8:	09 c0       	rjmp	.+18     	; 0x1ec <__vector_16+0x5e>
		case 3: 
			PORTB |= (1<<PORTB2);
 1da:	85 b1       	in	r24, 0x05	; 5
 1dc:	84 60       	ori	r24, 0x04	; 4
 1de:	85 b9       	out	0x05, r24	; 5
			PORTD = contador;
 1e0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <contador>
 1e4:	8b b9       	out	0x0b, r24	; 11
			break;
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__vector_16+0x5e>
		default:
		display = 0; 
 1e8:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <display>
	}
}
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_21>:

ISR(ADC_vect)
{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	8f 93       	push	r24
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
	decVolt = DIS7SEG[ADCH >> 4];
 20c:	a9 e7       	ldi	r26, 0x79	; 121
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	ec 91       	ld	r30, X
 212:	e2 95       	swap	r30
 214:	ef 70       	andi	r30, 0x0F	; 15
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	e0 50       	subi	r30, 0x00	; 0
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	80 81       	ld	r24, Z
 222:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	unidVolt = DIS7SEG[ADCH & 0x0F];
 226:	ec 91       	ld	r30, X
 228:	ef 70       	andi	r30, 0x0F	; 15
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	e0 50       	subi	r30, 0x00	; 0
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	80 81       	ld	r24, Z
 236:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <unidVolt>
	
	ADCSRA |= (1<<ADSC); 
 23a:	ea e7       	ldi	r30, 0x7A	; 122
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	80 64       	ori	r24, 0x40	; 64
 242:	80 83       	st	Z, r24
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	8f 91       	pop	r24
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
