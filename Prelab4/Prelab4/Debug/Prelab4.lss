
Prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000172  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c8  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000243  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036a  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000155e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  88:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PinChange>:
}
/****************************************/
// NON-Interrupt subroutines
void PinChange(void) {
	//Configuración del Pin_Change
	PCICR |= (1 << PCIE0); 
  90:	e8 e6       	ldi	r30, 0x68	; 104
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	81 60       	ori	r24, 0x01	; 1
  98:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3) | (1 << PCINT4);  
  9a:	eb e6       	ldi	r30, 0x6B	; 107
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 61       	ori	r24, 0x18	; 24
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <main>:
// Function prototypes
void PinChange(void);
/****************************************/
// Main Function
int main(void) {
	DDRC = 0xFF;  // Configura PORTD como salida 
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;    
  aa:	18 b8       	out	0x08, r1	; 8

	DDRB &= ~((1 << PB3) | (1 << PB4));  //Puerto B como salida 
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	87 7e       	andi	r24, 0xE7	; 231
  b0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB3) | (1 << PB4);    //Activacion de pull-ups
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	88 61       	ori	r24, 0x18	; 24
  b6:	85 b9       	out	0x05, r24	; 5

	PinChange(); 
  b8:	0e 94 48 00 	call	0x90	; 0x90 <PinChange>
	sei(); 
  bc:	78 94       	sei
  be:	ff cf       	rjmp	.-2      	; 0xbe <main+0x18>

000000c0 <__vector_3>:
	PCICR |= (1 << PCIE0); 
	PCMSK0 |= (1 << PCINT3) | (1 << PCINT4);  
}
/****************************************/
// Interrupt routine
ISR(PCINT0_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
	static uint8_t contador = 0; //variable para mantener el conteo 
	if (!(PINB & (1 << PB3))) {  
  cc:	1b 99       	sbic	0x03, 3	; 3
  ce:	05 c0       	rjmp	.+10     	; 0xda <__vector_3+0x1a>
		contador++;
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if (!(PINB & (1 << PB4))) {
  da:	1c 99       	sbic	0x03, 4	; 3
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <__vector_3+0x28>
		contador--;
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	81 50       	subi	r24, 0x01	; 1
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	PORTC = contador; //Salida del contador 
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	88 b9       	out	0x08, r24	; 8
}
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
